Auth:
https://blog.angular-university.io/angular-jwt-authentication/
https://github.com/cornflourblue/angular2-jwt-authentication-example (gotowy projekt z interceptorem i fake backendem)
https://github.com/cornflourblue/angular2-registration-login-example (jw ale pełniejsze, nie takie surowe demo)
// sprawdzić poniższe
https://github.com/angular/angular/issues/18224
AuthService oparty na HttpClient, który leci przez Interceptor oparty na AuthService (np żeby pobrać token) wywala się z circular dependency...
fixed w @5.2.3: common: allow HttpInterceptors to inject HttpClient (#19809) (ed2b717), closes #18224

MockAuth:
interceptor żeby nie musiało być serwera node, tylko lokalnie brało usera i jego JWT
patrz wyżej git

Walidacja:
// w mairę automatyczna i czysta walidacja z jakiegoś pliku z walidacjami, żeby ni ewszystko było tak brzydko inlinowo
// niech logowanie pokazuje błąd kiedy puste pola
// todo

Błędy:
https://www.loggly.com/blog/angular-exception-logging-made-simple/
https://medium.com/@aleixsuau/error-handling-angular-859d529fa53a
zrobiony PwaErrorHandler z Toastami i NavControllerem
// todo
// można w interceptorze zrobić "return next.handle(request).retry(5);" co próbuje 5 razy połączyćsię z serwerem zanim rzuci wyjątkiem
// drugi artykuł ładnie opisuje (ale dowiedzieć się dlaczego w nim jest Inject a w pierwszym zwykłe w construktorze DI)
// ktoś napisał: "You can use DI with your error handler; you just need to decorate your error handler as Injectable" - do sprawdzenia
// chyba to działa tylko wtedy kiedy Service wrzucany przez DI do ErrorHandlera nie jest nigdzie indziej używany
// http - próbowac retry, jak się nie da to toast; błędy w appce - redirect na stronęz błędem;
// 404 wewnątrz SPA - routing ** z info, i do tego obsługa NavigationError kiedy błąd routingu
// do tego wszystko logowane do consoli i na serwer (np. loggly.com, https://sentry.io, https://rollbar.com or http://jsnlog.com)
// nie da się używać s Service ionicowego NavControllera: https://forum.ionicframework.com/t/why-cant-i-import-navcontroller-and-viewcontroller-into-service-or-app/40999/49
// można tak: https://forum.ionicframework.com/t/extend-ionicerrorhandler-navigate-to-new-page/86331
// idea: z ErrorHandlera publishujemy event z błędem, w app.componnecie odbieramy event z błędem i redirectujemy do strony z errorem
// przewija się powyższe rozwiązanie w wątkach na SO
// można tak (BaseComponent): https://stackoverflow.com/questions/43222401/ionic-2-angular-2-alert-as-service-with-nav
// idea: rzeczy związane z wyglądem (toasty) i nawigacją (NavController) powinny być używane w komponentach, serwicesy są tylko do zwracania danych;
// więc robimy parent komponent z potrzebnymi w całej appce rzeczami (toastami, loadingim, redirectami) i ją extendujemy - i mamy dostęp do tego we wszystkich komponnetach

Ładowanie:
// kiedy coś nie może się dziać w tle (np. logowanie) to wyświetlać loading
// kiedy coś może się dziać w tle, to niech się dzieje w tle żeby nie przeszkadzać w UX
// todo

Warunkowe ładowanie rzeczy związanych z dev:
// np ładowanie backend mochk interceptora tylko na localhost, albo kiedy jest jakaś zmienna środowiskowa
// todo

i18n a/lub coś do 'mapowania' stringów - w stylu że jest error.message 'Unauthorized' a wyświetla się pełna wiadomość
// pewnie jakiś plik z obiektem errorString: fullDescriptionPl
// todo