Auth:
https://blog.angular-university.io/angular-jwt-authentication/
https://github.com/cornflourblue/angular2-jwt-authentication-example (gotowy projekt z interceptorem i fake backendem)
https://github.com/cornflourblue/angular2-registration-login-example (jw ale pełniejsze, nie takie surowe demo)
// sprawdzić poniższe
https://github.com/angular/angular/issues/18224
AuthService oparty na HttpClient, który leci przez Interceptor oparty na AuthService (np żeby pobrać token) wywala się z circular dependency...
fixed w @5.2.3: common: allow HttpInterceptors to inject HttpClient (#19809) (ed2b717), closes #18224

MockAuth:
interceptor żeby nie musiało być serwera node, tylko lokalnie brało usera i jego JWT
patrz wyżej git

Nawigacja:
używam navController, więc nie ma domyślnego routingu angularowego
strony to moduły, lazy load
menu boczne z logoutem wstępnie (//todo: tylko kiedy zalogowany, nie na loginie)
authGuard testowo na homepage, chyba trzeba zrobićBasePage i extendować żeby był wszędzie dostępny: https://devdactic.com/ionic-auth-guards/
// Jak wygodnie zrobić manu buton na wszystkich podstronach? -> komponent z atrybutami: https://stackoverflow.com/questions/41566079/ionic2-same-header-for-all-pages
// Jak najlepiej zrobić menu -> nowy komponent, który będzie mieć selektor np. <main-menu> wrzucony w app.html w <ion-menu>
// poczytać o urlach w Ionicu (np. parametry): https://ionicframework.com/docs/api/navigation/IonicPage/

Błędy:
https://www.loggly.com/blog/angular-exception-logging-made-simple/
https://medium.com/@aleixsuau/error-handling-angular-859d529fa53a
zrobiony PwaErrorHandler z Toastami i Event.publish, w app.componnecie Event.subscribe i nawigacja ionicowa
póki co RollBar do śledzenia wyjątków na stronie - testowy wyjątek działa
w interceptorze "return next.handle(request).retry(5);" co próbuje 5 razy połączyć się z serwerem zanim rzuci wyjątkiem
// todo
// drugi artykuł ładnie opisuje (ale dowiedzieć się dlaczego w nim jest Inject a w pierwszym zwykłe w construktorze DI)
// ktoś napisał: "You can use DI with your error handler; you just need to decorate your error handler as Injectable" - do sprawdzenia
// chyba to działa tylko wtedy kiedy Service wrzucany przez DI do ErrorHandlera nie jest nigdzie indziej używany
~ 404 wewnątrz SPA - routing ** z info, i do tego obsługa NavigationError kiedy błąd routingu
~ do tego wszystko logowane do consoli i na serwer (np. loggly.com, https://sentry.io, https://rollbar.com or http://jsnlog.com)
~ nie da się używać s Service ionicowego NavControllera: https://forum.ionicframework.com/t/why-cant-i-import-navcontroller-and-viewcontroller-into-service-or-app/40999/49
~ można tak: https://forum.ionicframework.com/t/extend-ionicerrorhandler-navigate-to-new-page/86331
~ idea: z ErrorHandlera publishujemy event z błędem, w app.componnecie odbieramy event z błędem i redirectujemy do strony z errorem
~ przewija się powyższe rozwiązanie w wątkach na SO
// można tak (BaseComponent): https://stackoverflow.com/questions/43222401/ionic-2-angular-2-alert-as-service-with-nav
// idea: rzeczy związane z wyglądem (toasty) i nawigacją (NavController) powinny być używane w komponentach, serwicesy są tylko do zwracania danych;
// więc robimy parent komponent z potrzebnymi w całej appce rzeczami (toastami, loadingim, redirectami) i ją extendujemy - i mamy dostęp do tego we wszystkich komponnetach

Ładowanie:
// kiedy coś nie może się dziać w tle (np. logowanie) to wyświetlać loading
// kiedy coś może się dziać w tle, to niech się dzieje w tle żeby nie przeszkadzać w UX
// todo

Walidacja:
// w mairę automatyczna i czysta walidacja z jakiegoś pliku z walidacjami, żeby ni ewszystko było tak brzydko inlinowo
// niech logowanie pokazuje błąd kiedy puste pola
// sprawdzić: https://github.com/naologic/angular-super-validator
// todo

Warunkowe ładowanie rzeczy związanych z dev:
w ionicu nie ma jako takich env, są obejścia i pluginy od tego
dodanie obsługi zmiennych środowiskowych, wg tego:
https://github.com/gshigeto/ionic-environment-variables
// ładowanie backend mock interceptora tylko na localhost, albo kiedy jest jakaś zmienna środowiskowa
// todo

i18n a/lub coś do 'mapowania' stringów - w stylu że jest error.message 'Unauthorized' a wyświetla się pełna wiadomość
// pewnie jakiś plik z obiektem errorString: fullDescriptionPl
// https://angular.io/guide/i18n
// todo

inne
// ionic ma coś takiego jak Config: https://ionicframework.com/docs/api/config/Config/
// można tam trzymać globalne stałe (nie jak ENV które się zmieniają w zależności od środowiska)
// np. backButtonText: 'Go Back', tabsPlacement: 'bottom',

// poczytać o wygasanu i refreshowaniu tokena
// wygodny interceptor, albo fake server rest
